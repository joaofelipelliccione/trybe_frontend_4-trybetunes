{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/04_trybetunes/src/pages/Login.jsx\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport { createUser } from '../services/userAPI';\nimport logo from '../images/trybetunesLogo.png';\nimport '../styles/Login.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.onInputChange = ({\n      target\n    }) => {\n      // Função que altera o valor de qualquer estado, sempre que um input for realizado no elemento onde ela está sendo chamada. || OBS: Para que tal função funcione, os 'name' de cada um dos elementos do Forms devem ser iguais ao nome dos estados.\n      const {\n        name\n      } = target;\n      const formElementValue = target.type === 'checkbox' ? target.checked : target.value;\n      this.setState({\n        [name]: formElementValue\n      });\n    };\n\n    this.onRegisterClick = async () => {\n      // Engloba, entre outras coisas, a função assíncrona createUser(). Essa última, simula uma requisição de criação de cadastro.\n      const {\n        username\n      } = this.state;\n      this.setState({\n        loading: true\n      });\n      await createUser({\n        name: username\n      }); // Salva as informações do usuário, no local storage.\n\n      this.setState({\n        loading: false,\n        redirectToSearch: true\n      });\n    };\n\n    this.registerWithEnter = e => {\n      // Permite fazer o login pressionando a tecla Enter.\n      e.preventDefault();\n      this.onRegisterClick();\n    };\n\n    this.state = {\n      username: '',\n      loading: false,\n      redirectToSearch: false\n    };\n  }\n\n  render() {\n    const {\n      username,\n      loading,\n      redirectToSearch\n    } = this.state;\n    const numOfCharacters = 3; // O React pede para que declare uma constante, ao invés de utilizar o número na condicional.\n    // A mensagem \"Carregando\", contida no componente React de classe Loading, será renderizada quando o estado \"loading\" for true.\n\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }, this);\n    } // O usuário será redirecionado para o path \"/search\" após se cadastrar na plataforma, ou seja, quando o estado \"redirectToSearch\" for true.\n\n\n    if (redirectToSearch) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        \"data-testid\": \"page-login\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"trybetunes-logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"login-name-input\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              id: \"login-name-input\",\n              \"data-testid\": \"login-name-input\",\n              type: \"text\",\n              name: \"username\",\n              value: username,\n              onChange: this.onInputChange,\n              onKeyPress: event => event.key === 'Enter' && this.registerWithEnter(event),\n              placeholder: \"Nome\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"login-button\",\n            \"data-testid\": \"login-submit-button\",\n            type: \"button\",\n            disabled: username.length < numOfCharacters // O botão só será habilitado quando o estado 'username' tiver 3 caracteres ou mais.\n            ,\n            onClick: this.onRegisterClick,\n            children: \"Entrar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Login;","map":{"version":3,"sources":["/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/04_trybetunes/src/pages/Login.jsx"],"names":["React","Redirect","Loading","createUser","logo","Login","Component","constructor","onInputChange","target","name","formElementValue","type","checked","value","setState","onRegisterClick","username","state","loading","redirectToSearch","registerWithEnter","e","preventDefault","render","numOfCharacters","event","key","length"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Loading from '../components/Loading';\nimport { createUser } from '../services/userAPI';\nimport logo from '../images/trybetunesLogo.png'\nimport '../styles/Login.css';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      username: '',\n      loading: false,\n      redirectToSearch: false,\n    };\n  }\n\n  onInputChange = ({ target }) => { // Função que altera o valor de qualquer estado, sempre que um input for realizado no elemento onde ela está sendo chamada. || OBS: Para que tal função funcione, os 'name' de cada um dos elementos do Forms devem ser iguais ao nome dos estados.\n    const { name } = target;\n    const formElementValue = target.type === 'checkbox' ? target.checked : target.value;\n\n    this.setState({ [name]: formElementValue });\n  }\n\n  onRegisterClick = async () => { // Engloba, entre outras coisas, a função assíncrona createUser(). Essa última, simula uma requisição de criação de cadastro.\n    const { username } = this.state;\n    this.setState({ loading: true });\n\n    await createUser({ name: username }); // Salva as informações do usuário, no local storage.\n\n    this.setState({\n      loading: false,\n      redirectToSearch: true,\n    });\n  }\n\n  registerWithEnter = (e) => { // Permite fazer o login pressionando a tecla Enter.\n    e.preventDefault();\n    this.onRegisterClick();\n  }\n\n  render() {\n    const { username, loading, redirectToSearch } = this.state;\n    const numOfCharacters = 3; // O React pede para que declare uma constante, ao invés de utilizar o número na condicional.\n\n    // A mensagem \"Carregando\", contida no componente React de classe Loading, será renderizada quando o estado \"loading\" for true.\n    if (loading) {\n      return (<Loading />);\n    }\n\n    // O usuário será redirecionado para o path \"/search\" após se cadastrar na plataforma, ou seja, quando o estado \"redirectToSearch\" for true.\n    if (redirectToSearch) {\n      return (<Redirect to=\"/search\" />);\n    }\n\n    return (\n      <div>\n        <main data-testid=\"page-login\">\n          <img src={logo} alt=\"trybetunes-logo\" />\n          <form>\n            <label htmlFor=\"login-name-input\">\n              <input\n                id=\"login-name-input\"\n                data-testid=\"login-name-input\"\n                type=\"text\"\n                name=\"username\"\n                value={ username }\n                onChange={ this.onInputChange }\n                onKeyPress={ (event) => event.key === 'Enter' && this.registerWithEnter(event) }\n                placeholder=\"Nome\"\n              />\n            </label>\n            <br />\n            <button\n              id=\"login-button\"\n              data-testid=\"login-submit-button\"\n              type=\"button\"\n              disabled={ username.length < numOfCharacters } // O botão só será habilitado quando o estado 'username' tiver 3 caracteres ou mais.\n              onClick={ this.onRegisterClick }\n            >\n              Entrar\n            </button>\n          </form>\n        </main>\n        \n      </div>\n    );\n  }\n}\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}