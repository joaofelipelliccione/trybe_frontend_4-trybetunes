{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/Curso-Trybe/trybe_projects/sd-015-a-project-trybetunes/src/pages/Favorites.jsx\";\nimport React from 'react';\nimport Header from '../components/Header';\nimport { addSong, removeSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Favorites extends React.Component {\n  constructor() {\n    super();\n\n    this.recoverFavorites = async () => {\n      // Engloba, entre outras coisas, a função assíncrona getFavoriteSongs(). Essa última, recupera o array de objetos, referente às músicas favoritas, que estão salvas no local storage.\n      this.setState({\n        loading: true\n      });\n      const favSongs = await getFavoriteSongs();\n      this.setState({\n        loading: false,\n        favoriteSongs: favSongs\n      });\n    };\n\n    this.state = {\n      loading: false,\n      favoriteSongs: []\n    };\n  }\n\n  componentDidMount() {\n    this.recoverFavorites();\n  }\n\n  // addRemoveFavorites = async ({ target }) => { // Engloba, entre outras coisas, as funções assíncronas addSong() e removeSong(). Essas últimas, marcam e desmarcam (respectivamente) uma determinada música como favorita, atualizando o local storage.\n  //   this.setState({ loading: true });\n  //   if (target.checked) {\n  //     await addSong();\n  //     await recoverFavorites();\n  //   } else {\n  //     await removeSong(trackInfo);\n  //     await this.recoverFavorites();\n  //   }\n  //   this.setState({\n  //     loading: false,\n  //   });\n  // }\n  render() {\n    const {\n      favoriteSongs\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-favorites\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"albumInfoContainerFav\",\n          children: favoriteSongs.map(({\n            artworkUrl100,\n            collectionName\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: artworkUrl100,\n              alt: albumName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n              \"data-testid\": \"album-name\",\n              children: albumName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              \"data-testid\": \"artist-name\",\n              children: artist\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"tracksListContainer\",\n          children: favoriteSongs.map(microObj => /*#__PURE__*/_jsxDEV(MusicCard, {\n            trackInfo: microObj\n          }, microObj.trackId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Favorites;","map":{"version":3,"sources":["/home/joaofelipe/Curso-Trybe/trybe_projects/sd-015-a-project-trybetunes/src/pages/Favorites.jsx"],"names":["React","Header","addSong","removeSong","getFavoriteSongs","Favorites","Component","constructor","recoverFavorites","setState","loading","favSongs","favoriteSongs","state","componentDidMount","render","map","artworkUrl100","collectionName","albumName","artist","microObj","trackId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,gBAA9B,QAAsD,8BAAtD;;;AAEA,MAAMC,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAadC,gBAbc,GAaK,YAAY;AAAE;AAC/B,WAAKC,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AAEA,YAAMC,QAAQ,GAAG,MAAMP,gBAAgB,EAAvC;AAEA,WAAKK,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZE,QAAAA,aAAa,EAAED;AAFH,OAAd;AAID,KAtBa;;AAGZ,SAAKE,KAAL,GAAa;AACXH,MAAAA,OAAO,EAAE,KADE;AAEXE,MAAAA,aAAa,EAAE;AAFJ,KAAb;AAID;;AAEDE,EAAAA,iBAAiB,GAAG;AAClB,SAAKN,gBAAL;AACD;;AAaD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEAO,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEH,MAAAA;AAAF,QAAoB,KAAKC,KAA/B;AAEA,wBACE;AAAK,qBAAY,gBAAjB;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCACE;AAAS,UAAA,SAAS,EAAC,uBAAnB;AAAA,oBACGD,aAAa,CAACI,GAAd,CAAkB,CAAC;AAAEC,YAAAA,aAAF;AAAiBC,YAAAA;AAAjB,WAAD,kBACjB;AAAA,oCACE;AAAK,cAAA,GAAG,EAAGD,aAAX;AAA2B,cAAA,GAAG,EAAGE;AAAjC;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAI,6BAAY,YAAhB;AAAA,wBAA+BA;AAA/B;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAG,6BAAY,aAAf;AAAA,wBAA+BC;AAA/B;AAAA;AAAA;AAAA;AAAA,oBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBADF,eAUE;AAAS,UAAA,EAAE,EAAC,qBAAZ;AAAA,oBACGR,aAAa,CAACI,GAAd,CAAmBK,QAAD,iBACjB,QAAC,SAAD;AAAW,YAAA,SAAS,EAAGA;AAAvB,aAAwCA,QAAQ,CAACC,OAAjD;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAqBD;;AAjEqC;;AAoExC,eAAejB,SAAf","sourcesContent":["import React from 'react';\nimport Header from '../components/Header';\nimport { addSong, removeSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\n\nclass Favorites extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      loading: false,\n      favoriteSongs: [],\n    };\n  }\n\n  componentDidMount() {\n    this.recoverFavorites();\n  }\n\n  recoverFavorites = async () => { // Engloba, entre outras coisas, a função assíncrona getFavoriteSongs(). Essa última, recupera o array de objetos, referente às músicas favoritas, que estão salvas no local storage.\n    this.setState({ loading: true });\n\n    const favSongs = await getFavoriteSongs();\n\n    this.setState({\n      loading: false,\n      favoriteSongs: favSongs,\n    });\n  }\n\n  // addRemoveFavorites = async ({ target }) => { // Engloba, entre outras coisas, as funções assíncronas addSong() e removeSong(). Essas últimas, marcam e desmarcam (respectivamente) uma determinada música como favorita, atualizando o local storage.\n  //   this.setState({ loading: true });\n\n  //   if (target.checked) {\n  //     await addSong();\n  //     await recoverFavorites();\n  //   } else {\n  //     await removeSong(trackInfo);\n  //     await this.recoverFavorites();\n  //   }\n\n  //   this.setState({\n  //     loading: false,\n  //   });\n  // }\n\n  render() {\n    const { favoriteSongs } = this.state;\n\n    return (\n      <div data-testid=\"page-favorites\">\n        <Header />\n        <main>\n          <section className=\"albumInfoContainerFav\">\n            {favoriteSongs.map(({ artworkUrl100, collectionName }) => (\n              <div>\n                <img src={ artworkUrl100 } alt={ albumName } />\n                <h4 data-testid=\"album-name\">{ albumName }</h4>\n                <p data-testid=\"artist-name\">{ artist }</p>\n              </div>\n            ))}\n          </section>\n          <section id=\"tracksListContainer\">\n            {favoriteSongs.map((microObj) => (\n              <MusicCard trackInfo={ microObj } key={ microObj.trackId } />\n            ))}\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Favorites;\n"]},"metadata":{},"sourceType":"module"}