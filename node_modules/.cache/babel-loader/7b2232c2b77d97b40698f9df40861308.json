{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/Curso-Trybe/trybe_projects/sd-015-a-project-trybetunes/src/pages/Album.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\nimport { getFavoriteSongs } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Album extends React.Component {\n  constructor() {\n    super();\n\n    this.getMusicsFromAlbum = async () => {\n      // Engloba, entre outras coisas, a função assíncrona getMusics(). Essa última, realiza uma requisição para a API do Itunes que retorna um array de objetos onde, cada objeto, diz respeito à uma música de um determinado álbum.\n      const {\n        match: {\n          params: {\n            id\n          }\n        }\n      } = this.props; // O id é uma informação acumulada pelo próprio <Route /> que encapsula o componente React de classe \"Album\".\n\n      const response = await getMusics(id);\n      this.setState({\n        // O primeiro elemento do array (índice 0), oriundo da response, acumula informações do album e não de uma música específica, como ocorre nos elementos de índice >= 1.\n        musics: response,\n        albumImg: response[0].artworkUrl100,\n        albumName: response[0].collectionName,\n        artist: response[0].artistName\n      });\n    };\n\n    this.recoverFavorites = async () => {\n      this.setState({\n        loading: true\n      });\n      const favSongs = await getFavoriteSongs();\n      console.log(favSongs);\n      this.setState({\n        // loading: false,\n        favoriteSongs: favSongs\n      });\n    };\n\n    this.state = {\n      loading: false,\n      musics: [],\n      favoriteSongs: []\n    };\n  }\n\n  componentDidMount() {\n    this.getMusicsFromAlbum();\n    this.recoverFavorites();\n  }\n\n  render() {\n    const {\n      musics,\n      albumImg,\n      albumName,\n      artist\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-album\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"albumInfoContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: albumImg,\n            alt: albumName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            \"data-testid\": \"album-name\",\n            children: albumName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            \"data-testid\": \"artist-name\",\n            children: artist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"tracksListContainer\",\n          children: musics.map((microObj, index) => index > 0 && /*#__PURE__*/_jsxDEV(MusicCard, {\n            trackInfo: microObj\n          }, microObj.trackId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 28\n          }, this) // O primeiro elemento do array (índice 0) acumula informações do album e não de uma música específica.\n          )\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string\n    })\n  }).isRequired\n};\nexport default Album;","map":{"version":3,"sources":["/home/joaofelipe/Curso-Trybe/trybe_projects/sd-015-a-project-trybetunes/src/pages/Album.jsx"],"names":["React","PropTypes","Header","MusicCard","getMusics","getFavoriteSongs","Album","Component","constructor","getMusicsFromAlbum","match","params","id","props","response","setState","musics","albumImg","artworkUrl100","albumName","collectionName","artist","artistName","recoverFavorites","loading","favSongs","console","log","favoriteSongs","state","componentDidMount","render","map","microObj","index","trackId","propTypes","shape","string","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport getMusics from '../services/musicsAPI';\nimport { getFavoriteSongs } from '../services/favoriteSongsAPI';\n\nclass Album extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      loading: false,\n      musics: [],\n      favoriteSongs: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getMusicsFromAlbum();\n    this.recoverFavorites();\n  }\n\n  getMusicsFromAlbum = async () => { // Engloba, entre outras coisas, a função assíncrona getMusics(). Essa última, realiza uma requisição para a API do Itunes que retorna um array de objetos onde, cada objeto, diz respeito à uma música de um determinado álbum.\n    const { match: { params: { id } } } = this.props; // O id é uma informação acumulada pelo próprio <Route /> que encapsula o componente React de classe \"Album\".\n\n    const response = await getMusics(id);\n\n    this.setState({ // O primeiro elemento do array (índice 0), oriundo da response, acumula informações do album e não de uma música específica, como ocorre nos elementos de índice >= 1.\n      musics: response,\n      albumImg: response[0].artworkUrl100,\n      albumName: response[0].collectionName,\n      artist: response[0].artistName,\n    });\n  }\n\n  recoverFavorites = async () => {\n    this.setState({ loading: true });\n\n    const favSongs = await getFavoriteSongs();\n    console.log(favSongs);\n    this.setState({\n      // loading: false,\n      favoriteSongs: favSongs,\n    });\n  }\n\n  render() {\n    const { musics, albumImg, albumName, artist } = this.state;\n    return (\n      <div data-testid=\"page-album\">\n        <Header />\n        <main>\n          <section id=\"albumInfoContainer\">\n            <img src={ albumImg } alt={ albumName } />\n            <h4 data-testid=\"album-name\">{ albumName }</h4>\n            <p data-testid=\"artist-name\">{ artist }</p>\n          </section>\n          <section id=\"tracksListContainer\">\n            {musics.map((microObj, index) => (\n              index > 0 && <MusicCard trackInfo={ microObj } key={ microObj.trackId } />\n              // O primeiro elemento do array (índice 0) acumula informações do album e não de uma música específica.\n            ))}\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nAlbum.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default Album;\n"]},"metadata":{},"sourceType":"module"}