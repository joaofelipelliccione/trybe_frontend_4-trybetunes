{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/Curso-Trybe/trybe_projects/sd-015-a-project-trybetunes/src/components/MusicCard.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Loading from './Loading';\nimport { addSong, removeSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MusicCard extends React.Component {\n  // É chamado dentro de <Album />.\n  constructor() {\n    super();\n\n    this.recoverFavorites = async () => {\n      // Engloba, entre outras coisas, a função assíncrona getFavoriteSongs(). Essa última, recupera o array de objetos, referente às músicas favoritas, que estão salvas no local storage.\n      this.setState({\n        loading: true\n      });\n      const favSongs = await getFavoriteSongs();\n      this.setState({\n        loading: false,\n        favoriteSongs: favSongs\n      });\n    };\n\n    this.addRemoveFavorites = async ({\n      target\n    }) => {\n      // Engloba, entre outras coisas, as funções assíncronas addSong() e removeSong(). Essas últimas, marcam e desmarcam (respectivamente) uma determinada música como favorita, atualizando o local storage.\n      const {\n        trackInfo\n      } = this.props;\n      this.setState({\n        loading: true\n      });\n\n      if (target.checked) {\n        await addSong(trackInfo);\n        await this.recoverFavorites();\n      } else {\n        await removeSong(trackInfo);\n        await this.recoverFavorites();\n        window.location.reload(false);\n      }\n\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.state = {\n      loading: false,\n      favoriteSongs: []\n    };\n  }\n\n  componentDidMount() {\n    this.recoverFavorites();\n  }\n\n  render() {\n    const {\n      trackInfo: {\n        trackName,\n        previewUrl,\n        trackId\n      }\n    } = this.props;\n    const {\n      loading,\n      favoriteSongs\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"eachTrack\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: trackName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        \"data-testid\": \"audio-component\",\n        src: previewUrl,\n        controls: true,\n        children: [/*#__PURE__*/_jsxDEV(\"track\", {\n          kind: \"captions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), \"O seu navegador n\\xE3o suporta o elemento\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"favCheckbox\",\n        children: [\"Favorita\", /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"favCheckbox\",\n          \"data-testid\": `checkbox-music-${trackId}`,\n          type: \"checkbox\",\n          name: trackId,\n          onClick: this.addRemoveFavorites,\n          checked: favoriteSongs.some(microObj => microObj.trackId === trackId) // Se a 'trackId' do momento for encontrada na lista de favoritas, o checkbox será marcado (true).\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nMusicCard.propTypes = {\n  trackInfo: PropTypes.shape({\n    trackName: PropTypes.string,\n    previewUrl: PropTypes.string,\n    trackId: PropTypes.number\n  }).isRequired\n};\nexport default MusicCard;","map":{"version":3,"sources":["/home/joaofelipe/Curso-Trybe/trybe_projects/sd-015-a-project-trybetunes/src/components/MusicCard.jsx"],"names":["React","PropTypes","Loading","addSong","removeSong","getFavoriteSongs","MusicCard","Component","constructor","recoverFavorites","setState","loading","favSongs","favoriteSongs","addRemoveFavorites","target","trackInfo","props","checked","window","location","reload","state","componentDidMount","render","trackName","previewUrl","trackId","some","microObj","propTypes","shape","string","number","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport Loading from './Loading';\nimport { addSong, removeSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\n\nclass MusicCard extends React.Component { // É chamado dentro de <Album />.\n  constructor() {\n    super();\n\n    this.state = {\n      loading: false,\n      favoriteSongs: [],\n    };\n  }\n\n  componentDidMount() {\n    this.recoverFavorites();\n  }\n\n  recoverFavorites = async () => { // Engloba, entre outras coisas, a função assíncrona getFavoriteSongs(). Essa última, recupera o array de objetos, referente às músicas favoritas, que estão salvas no local storage.\n    this.setState({ loading: true });\n\n    const favSongs = await getFavoriteSongs();\n    this.setState({\n      loading: false,\n      favoriteSongs: favSongs,\n    });\n  }\n\n  addRemoveFavorites = async ({ target }) => { // Engloba, entre outras coisas, as funções assíncronas addSong() e removeSong(). Essas últimas, marcam e desmarcam (respectivamente) uma determinada música como favorita, atualizando o local storage.\n    const { trackInfo } = this.props;\n    this.setState({ loading: true });\n\n    if (target.checked) {\n      await addSong(trackInfo);\n      await this.recoverFavorites();\n    } else {\n      await removeSong(trackInfo);\n      await this.recoverFavorites();\n      window.location.reload(false);\n    }\n\n    this.setState({ loading: false });\n  }\n\n  render() {\n    const { trackInfo: { trackName, previewUrl, trackId } } = this.props;\n    const { loading, favoriteSongs } = this.state;\n\n    return (\n      <div className=\"eachTrack\">\n        <p>{trackName}</p>\n        {loading && <Loading />}\n        <audio data-testid=\"audio-component\" src={ previewUrl } controls>\n          <track kind=\"captions\" />\n          O seu navegador não suporta o elemento\n          <code>audio</code>\n        </audio>\n        <label htmlFor=\"favCheckbox\">\n          Favorita\n          <input\n            className=\"favCheckbox\"\n            data-testid={ `checkbox-music-${trackId}` }\n            type=\"checkbox\"\n            name={ trackId }\n            onClick={ this.addRemoveFavorites }\n            checked={ favoriteSongs.some((microObj) => microObj.trackId === trackId) } // Se a 'trackId' do momento for encontrada na lista de favoritas, o checkbox será marcado (true).\n          />\n        </label>\n      </div>\n    );\n  }\n}\n\nMusicCard.propTypes = {\n  trackInfo: PropTypes.shape({\n    trackName: PropTypes.string,\n    previewUrl: PropTypes.string,\n    trackId: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MusicCard;\n"]},"metadata":{},"sourceType":"module"}