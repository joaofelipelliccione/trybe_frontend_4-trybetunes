{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/04_trybetunes/src/pages/Search.jsx\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport Loading from '../components/Loading';\nimport searchAlbumsAPI from '../services/searchAlbumsAPI';\nimport '../styles/Search.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Search extends React.Component {\n  constructor() {\n    super();\n\n    this.onInputChange = ({\n      target\n    }) => {\n      // Função que altera o valor de qualquer estado, sempre que um input for realizado no elemento onde ela está sendo chamada. || OBS: Para que tal função funcione, os 'name' de cada um dos elementos do Forms devem ser iguais ao nome dos estados.\n      const {\n        name\n      } = target;\n      const formElementValue = target.type === 'checkbox' ? target.checked : target.value;\n      this.setState({\n        [name]: formElementValue\n      });\n    };\n\n    this.onSearchClick = async () => {\n      // Engloba, entre outras coisas, a função assíncrona searchAlbumsAPI(). Essa última, realiza uma requisição para a API do Itunes que retorna um array de objetos onde, cada objeto, diz respeito à um álbum musical de um determinado artista.\n      const {\n        userSearch\n      } = this.state;\n      this.setState({\n        loading: true,\n        lastSearchedArtist: userSearch,\n        userSearch: ''\n      });\n      const response = await searchAlbumsAPI(userSearch);\n      this.setState({\n        albuns: response,\n        loading: false\n      });\n    };\n\n    this.displaySearchBar = () => {\n      // Função que retorna os elementos HTML para que o usuário consiga pesquisar um determinado artista.\n      const {\n        userSearch\n      } = this.state;\n      const numOfCharacters = 2;\n      return /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"searchArtistForm\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"searchBar\",\n          \"data-testid\": \"search-artist-input\",\n          type: \"text\",\n          name: \"userSearch\",\n          value: userSearch,\n          onChange: this.onInputChange,\n          onKeyUp: e => {\n            e.preventDefault();\n          },\n          placeholder: \"Nome do Artista\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"search-button\",\n          \"data-testid\": \"search-artist-button\",\n          type: \"button\",\n          disabled: userSearch.length < numOfCharacters // O botão só será habilitado quando o estado 'username' tiver 3 caracteres ou mais.\n          ,\n          onClick: this.onSearchClick,\n          children: \"\\uD83D\\uDD0E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.displayAlbuns = () => {\n      // Função que retorna o elemento HTML a ser renderizado quando o artista pesquisado apresenta álbuns.\n      const {\n        lastSearchedArtist,\n        albuns\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"apiResultContainer2\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: `Retorno da pesquisa por: ${lastSearchedArtist}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"albunsContainer\",\n          children: albuns.map(({\n            collectionId,\n            artworkUrl100,\n            collectionName,\n            artistName\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"eachAlbum\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: artworkUrl100,\n              alt: collectionName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: collectionName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: artistName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Link, {\n              to: `/album/${collectionId}`,\n              \"data-testid\": `link-to-album-${collectionId}`,\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Abrir \\xC1lbum\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this)]\n          }, collectionId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.displayWarning = () =>\n    /*#__PURE__*/\n    // Função que retorna o elemento HTML a ser renderizado quando o artista pesquisado não é achado.\n    _jsxDEV(\"section\", {\n      id: \"apiResultContainer2\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Nenhum \\xE1lbum foi encontrado at\\xE9 agora...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this);\n\n    this.state = {\n      loading: false,\n      userSearch: '',\n      lastSearchedArtist: '',\n      albuns: []\n    };\n  }\n\n  render() {\n    const {\n      loading,\n      albuns\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-search\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        id: \"searchPageMain\",\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"searchBarContainer\",\n          children: loading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this) : this.displaySearchBar()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"apiResultContainer\",\n          children: albuns.length > 0 ? this.displayAlbuns() : this.displayWarning()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Search;","map":{"version":3,"sources":["/home/joaofelipe/joaofelipelliccione.github.io/projetos-trybe/2-Frontend/04_trybetunes/src/pages/Search.jsx"],"names":["React","Link","Header","Loading","searchAlbumsAPI","Search","Component","constructor","onInputChange","target","name","formElementValue","type","checked","value","setState","onSearchClick","userSearch","state","loading","lastSearchedArtist","response","albuns","displaySearchBar","numOfCharacters","e","preventDefault","length","displayAlbuns","map","collectionId","artworkUrl100","collectionName","artistName","displayWarning","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Header from '../components/Header';\nimport Loading from '../components/Loading';\nimport searchAlbumsAPI from '../services/searchAlbumsAPI';\nimport '../styles/Search.css';\n\nclass Search extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      loading: false,\n      userSearch: '',\n      lastSearchedArtist: '',\n      albuns: [],\n    };\n  }\n\n  onInputChange = ({ target }) => { // Função que altera o valor de qualquer estado, sempre que um input for realizado no elemento onde ela está sendo chamada. || OBS: Para que tal função funcione, os 'name' de cada um dos elementos do Forms devem ser iguais ao nome dos estados.\n    const { name } = target;\n    const formElementValue = target.type === 'checkbox' ? target.checked : target.value;\n\n    this.setState({ [name]: formElementValue });\n  }\n\n  onSearchClick = async () => { // Engloba, entre outras coisas, a função assíncrona searchAlbumsAPI(). Essa última, realiza uma requisição para a API do Itunes que retorna um array de objetos onde, cada objeto, diz respeito à um álbum musical de um determinado artista.\n    const { userSearch } = this.state;\n\n    this.setState({\n      loading: true,\n      lastSearchedArtist: userSearch,\n      userSearch: '',\n    });\n\n    const response = await searchAlbumsAPI(userSearch);\n\n    this.setState({\n      albuns: response,\n      loading: false,\n    });\n  }\n\n  displaySearchBar = () => { // Função que retorna os elementos HTML para que o usuário consiga pesquisar um determinado artista.\n    const { userSearch } = this.state;\n    const numOfCharacters = 2;\n\n    return (\n      <form id=\"searchArtistForm\">\n        <input\n          id=\"searchBar\"\n          data-testid=\"search-artist-input\"\n          type=\"text\"\n          name=\"userSearch\"\n          value={ userSearch }\n          onChange={ this.onInputChange }\n          onKeyUp={ (e) => {\n            e.preventDefault();\n            \n          }}\n          placeholder=\"Nome do Artista\"\n        />\n        <button\n          id=\"search-button\"\n          data-testid=\"search-artist-button\"\n          type=\"button\"\n          disabled={ userSearch.length < numOfCharacters } // O botão só será habilitado quando o estado 'username' tiver 3 caracteres ou mais.\n          onClick={ this.onSearchClick }\n        >\n          🔎\n        </button>\n      </form>\n    );\n  }\n\n  displayAlbuns = () => { // Função que retorna o elemento HTML a ser renderizado quando o artista pesquisado apresenta álbuns.\n    const { lastSearchedArtist, albuns } = this.state;\n\n    return (\n      <div id=\"apiResultContainer2\">\n        <h3>{`Retorno da pesquisa por: ${lastSearchedArtist}`}</h3>\n        <div id=\"albunsContainer\">\n          {albuns.map(({ collectionId, artworkUrl100, collectionName, artistName }) => (\n            <div id=\"eachAlbum\" key={ collectionId }>\n              <img src={ artworkUrl100 } alt={ collectionName } />\n              <p>{ collectionName }</p>\n              <p>{ artistName }</p>\n              <Link\n                to={ `/album/${collectionId}` }\n                data-testid={ `link-to-album-${collectionId}` }\n              >\n                <span>Abrir Álbum</span>\n              </Link>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  displayWarning = () => ( // Função que retorna o elemento HTML a ser renderizado quando o artista pesquisado não é achado.\n    <section id=\"apiResultContainer2\">\n      {}\n      <h3>Nenhum álbum foi encontrado até agora...</h3>\n    </section>\n  );\n\n  render() {\n    const { loading, albuns } = this.state;\n\n    return (\n      <div data-testid=\"page-search\">\n        <Header />\n        <main id=\"searchPageMain\">\n          <section id=\"searchBarContainer\">\n            { loading ? <Loading /> : this.displaySearchBar() }\n          </section>\n          <section id=\"apiResultContainer\">\n            { albuns.length > 0 ? this.displayAlbuns() : this.displayWarning() }\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}