{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/Curso-Trybe/trybe_projects/sd-015-a-project-trybetunes/src/pages/Favorites.jsx\";\nimport React from 'react';\nimport Header from '../components/Header';\nimport { addSong, removeSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Favorites extends React.Component {\n  constructor() {\n    super();\n\n    this.recoverFavorites = async () => {\n      // Engloba, entre outras coisas, a função assíncrona getFavoriteSongs(). Essa última, recupera o array de objetos, referente às músicas favoritas, que estão salvas no local storage.\n      this.setState({\n        loading: true\n      });\n      const favSongs = await getFavoriteSongs();\n      this.setState({\n        loading: false,\n        favoriteSongs: favSongs\n      });\n    };\n\n    this.addRemoveFavorites = async ({\n      target\n    }) => {\n      // Engloba, entre outras coisas, as funções assíncronas addSong() e removeSong(). Essas últimas, marcam e desmarcam (respectivamente) uma determinada música como favorita, atualizando o local storage.\n      this.setState({\n        loading: true\n      });\n\n      if (target.checked) {\n        await addSong();\n        await recoverFavorites();\n      } else {\n        await removeSong(trackInfo);\n        await this.recoverFavorites();\n      }\n\n      this.setState({\n        loading: false\n      });\n    };\n\n    this.state = {\n      loading: false,\n      favoriteSongs: []\n    };\n  }\n\n  componentDidMount() {\n    this.recoverFavorites();\n  }\n\n  render() {\n    const {\n      favoriteSongs: {}\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-favorites\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"albumInfoContainerFav\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: albumImg,\n            alt: albumName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            \"data-testid\": \"album-name\",\n            children: albumName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            \"data-testid\": \"artist-name\",\n            children: artist\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          id: \"tracksListContainer\",\n          children: musics.map((microObj, index) => index > 0 && /*#__PURE__*/_jsxDEV(MusicCard, {\n            trackInfo: microObj\n          }, microObj.trackId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 28\n          }, this) // O primeiro elemento do array (índice 0) acumula informações do album e não de uma música específica.\n          )\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Favorites;","map":{"version":3,"sources":["/home/joaofelipe/Curso-Trybe/trybe_projects/sd-015-a-project-trybetunes/src/pages/Favorites.jsx"],"names":["React","Header","addSong","removeSong","getFavoriteSongs","Favorites","Component","constructor","recoverFavorites","setState","loading","favSongs","favoriteSongs","addRemoveFavorites","target","checked","trackInfo","state","componentDidMount","render","albumImg","albumName","artist","musics","map","microObj","index","trackId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,OAAT,EAAkBC,UAAlB,EAA8BC,gBAA9B,QAAsD,8BAAtD;;;AAEA,MAAMC,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAadC,gBAbc,GAaK,YAAY;AAAE;AAC/B,WAAKC,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AAEA,YAAMC,QAAQ,GAAG,MAAMP,gBAAgB,EAAvC;AAEA,WAAKK,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZE,QAAAA,aAAa,EAAED;AAFH,OAAd;AAID,KAtBa;;AAAA,SAwBdE,kBAxBc,GAwBO,OAAO;AAAEC,MAAAA;AAAF,KAAP,KAAsB;AAAE;AAC3C,WAAKL,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;;AAEA,UAAII,MAAM,CAACC,OAAX,EAAoB;AAClB,cAAMb,OAAO,EAAb;AACA,cAAMM,gBAAgB,EAAtB;AACD,OAHD,MAGO;AACL,cAAML,UAAU,CAACa,SAAD,CAAhB;AACA,cAAM,KAAKR,gBAAL,EAAN;AACD;;AAED,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD,KAtCa;;AAGZ,SAAKO,KAAL,GAAa;AACXP,MAAAA,OAAO,EAAE,KADE;AAEXE,MAAAA,aAAa,EAAE;AAFJ,KAAb;AAID;;AAEDM,EAAAA,iBAAiB,GAAG;AAClB,SAAKV,gBAAL;AACD;;AA6BDW,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEP,MAAAA,aAAa,EAAE;AAAjB,QAA0B,KAAKK,KAArC;AAEA,wBACE;AAAK,qBAAY,gBAAjB;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCACE;AAAS,UAAA,SAAS,EAAC,uBAAnB;AAAA,kCACE;AAAK,YAAA,GAAG,EAAGG,QAAX;AAAsB,YAAA,GAAG,EAAGC;AAA5B;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAI,2BAAY,YAAhB;AAAA,sBAA+BA;AAA/B;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAG,2BAAY,aAAf;AAAA,sBAA+BC;AAA/B;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AAAS,UAAA,EAAE,EAAC,qBAAZ;AAAA,oBACGC,MAAM,CAACC,GAAP,CAAW,CAACC,QAAD,EAAWC,KAAX,KACVA,KAAK,GAAG,CAAR,iBAAa,QAAC,SAAD;AAAW,YAAA,SAAS,EAAGD;AAAvB,aAAwCA,QAAQ,CAACE,OAAjD;AAAA;AAAA;AAAA;AAAA,kBADH,CAEV;AAFD;AADH;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAkBD;;AA9DqC;;AAiExC,eAAetB,SAAf","sourcesContent":["import React from 'react';\nimport Header from '../components/Header';\nimport { addSong, removeSong, getFavoriteSongs } from '../services/favoriteSongsAPI';\n\nclass Favorites extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      loading: false,\n      favoriteSongs: [],\n    };\n  }\n\n  componentDidMount() {\n    this.recoverFavorites();\n  }\n\n  recoverFavorites = async () => { // Engloba, entre outras coisas, a função assíncrona getFavoriteSongs(). Essa última, recupera o array de objetos, referente às músicas favoritas, que estão salvas no local storage.\n    this.setState({ loading: true });\n\n    const favSongs = await getFavoriteSongs();\n\n    this.setState({\n      loading: false,\n      favoriteSongs: favSongs,\n    });\n  }\n\n  addRemoveFavorites = async ({ target }) => { // Engloba, entre outras coisas, as funções assíncronas addSong() e removeSong(). Essas últimas, marcam e desmarcam (respectivamente) uma determinada música como favorita, atualizando o local storage.\n    this.setState({ loading: true });\n\n    if (target.checked) {\n      await addSong();\n      await recoverFavorites();\n    } else {\n      await removeSong(trackInfo);\n      await this.recoverFavorites();\n    }\n\n    this.setState({\n      loading: false,\n    });\n  }\n\n  render() {\n    const { favoriteSongs: {  } } = this.state;\n\n    return (\n      <div data-testid=\"page-favorites\">\n        <Header />\n        <main>\n          <section className=\"albumInfoContainerFav\">\n            <img src={ albumImg } alt={ albumName } />\n            <h4 data-testid=\"album-name\">{ albumName }</h4>\n            <p data-testid=\"artist-name\">{ artist }</p>\n          </section>\n          <section id=\"tracksListContainer\">\n            {musics.map((microObj, index) => (\n              index > 0 && <MusicCard trackInfo={ microObj } key={ microObj.trackId } />\n              // O primeiro elemento do array (índice 0) acumula informações do album e não de uma música específica.\n            ))}\n          </section>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Favorites;\n"]},"metadata":{},"sourceType":"module"}