{"ast":null,"code":"var _jsxFileName = \"/home/joaofelipe/Curso-Trybe/trybe_projects/sd-015-a-project-trybetunes/src/pages/Favorites.jsx\";\nimport React from 'react';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport { getFavoriteSongs } from '../services/favoriteSongsAPI';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Favorites extends React.Component {\n  constructor() {\n    super();\n\n    this.recoverFavorites = async () => {\n      // Engloba, entre outras coisas, a função assíncrona getFavoriteSongs(). Essa última, recupera o array de objetos, referente às músicas favoritas, que estão salvas no local storage.\n      this.setState({\n        loading: true\n      });\n      const favSongs = await getFavoriteSongs();\n      this.setState({\n        loading: false,\n        favoriteSongs: favSongs\n      });\n    };\n\n    this.removeFromFavorites = async ({\n      target\n    }) => {\n      // Engloba, entre outras coisas, a função assíncrona removeSong(). Essa última, permite que o usuário desmarque uma determinada música que havia favoritado anteriormente, atualizando o local storage.\n      this.setState({\n        loading: true\n      });\n      await removeSong(trackInfo);\n      await this.recoverFavorites();\n      this.setState({\n        loading: false\n      });\n      window.location.reload(false);\n    };\n\n    this.state = {\n      loading: false,\n      favoriteSongs: []\n    };\n  }\n\n  componentDidMount() {\n    this.recoverFavorites();\n  }\n\n  render() {\n    const {\n      favoriteSongs\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      \"data-testid\": \"page-favorites\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: favoriteSongs.map(microObj => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: microObj.artworkUrl30,\n            alt: microObj.collectionName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: microObj.artistName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MusicCard, {\n            trackInfo: microObj\n          }, microObj.trackId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Favorites;","map":{"version":3,"sources":["/home/joaofelipe/Curso-Trybe/trybe_projects/sd-015-a-project-trybetunes/src/pages/Favorites.jsx"],"names":["React","Header","MusicCard","getFavoriteSongs","Favorites","Component","constructor","recoverFavorites","setState","loading","favSongs","favoriteSongs","removeFromFavorites","target","removeSong","trackInfo","window","location","reload","state","componentDidMount","render","map","microObj","artworkUrl30","collectionName","artistName","trackId"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,gBAAT,QAAiC,8BAAjC;;;AAEA,MAAMC,SAAN,SAAwBJ,KAAK,CAACK,SAA9B,CAAwC;AACtCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAadC,gBAbc,GAaK,YAAY;AAAE;AAC/B,WAAKC,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AAEA,YAAMC,QAAQ,GAAG,MAAMP,gBAAgB,EAAvC;AAEA,WAAKK,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE,KADG;AAEZE,QAAAA,aAAa,EAAED;AAFH,OAAd;AAID,KAtBa;;AAAA,SAwBdE,mBAxBc,GAwBQ,OAAO;AAAEC,MAAAA;AAAF,KAAP,KAAsB;AAAE;AAC5C,WAAKL,QAAL,CAAc;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAd;AAEA,YAAMK,UAAU,CAACC,SAAD,CAAhB;AACA,YAAM,KAAKR,gBAAL,EAAN;AAEA,WAAKC,QAAL,CAAc;AACZC,QAAAA,OAAO,EAAE;AADG,OAAd;AAGAO,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,KAAvB;AACD,KAlCa;;AAGZ,SAAKC,KAAL,GAAa;AACXV,MAAAA,OAAO,EAAE,KADE;AAEXE,MAAAA,aAAa,EAAE;AAFJ,KAAb;AAID;;AAEDS,EAAAA,iBAAiB,GAAG;AAClB,SAAKb,gBAAL;AACD;;AAyBDc,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEV,MAAAA;AAAF,QAAoB,KAAKQ,KAA/B;AAEA,wBACE;AAAK,qBAAY,gBAAjB;AAAA,8BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBACGR,aAAa,CAACW,GAAd,CAAmBC,QAAD,iBACjB;AAAA,kCACE;AAAK,YAAA,GAAG,EAAGA,QAAQ,CAACC,YAApB;AAAmC,YAAA,GAAG,EAAGD,QAAQ,CAACE;AAAlD;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA,sBAAKF,QAAQ,CAACG;AAAd;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE,QAAC,SAAD;AAAW,YAAA,SAAS,EAAGH;AAAvB,aAAwCA,QAAQ,CAACI,OAAjD;AAAA;AAAA;AAAA;AAAA,kBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AAtDqC;;AAyDxC,eAAevB,SAAf","sourcesContent":["import React from 'react';\nimport Header from '../components/Header';\nimport MusicCard from '../components/MusicCard';\nimport { getFavoriteSongs } from '../services/favoriteSongsAPI';\n\nclass Favorites extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      loading: false,\n      favoriteSongs: [],\n    };\n  }\n\n  componentDidMount() {\n    this.recoverFavorites();\n  }\n\n  recoverFavorites = async () => { // Engloba, entre outras coisas, a função assíncrona getFavoriteSongs(). Essa última, recupera o array de objetos, referente às músicas favoritas, que estão salvas no local storage.\n    this.setState({ loading: true });\n\n    const favSongs = await getFavoriteSongs();\n\n    this.setState({\n      loading: false,\n      favoriteSongs: favSongs,\n    });\n  }\n\n  removeFromFavorites = async ({ target }) => { // Engloba, entre outras coisas, a função assíncrona removeSong(). Essa última, permite que o usuário desmarque uma determinada música que havia favoritado anteriormente, atualizando o local storage.\n    this.setState({ loading: true });\n\n    await removeSong(trackInfo);\n    await this.recoverFavorites();\n\n    this.setState({\n      loading: false,\n    });\n    window.location.reload(false);\n  }\n\n  render() {\n    const { favoriteSongs } = this.state;\n\n    return (\n      <div data-testid=\"page-favorites\">\n        <Header />\n        <main>\n          {favoriteSongs.map((microObj) => (\n            <div>\n              <img src={ microObj.artworkUrl30 } alt={ microObj.collectionName } />\n              <p>{ microObj.artistName }</p>\n              <MusicCard trackInfo={ microObj } key={ microObj.trackId } />\n            </div>\n          ))}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Favorites;\n"]},"metadata":{},"sourceType":"module"}